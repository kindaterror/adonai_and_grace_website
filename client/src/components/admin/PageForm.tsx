// Simplified non-autosave PageForm (saves only on blur or structural changes)
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Trash2, Plus, Upload, X, Image, Sparkles, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from '@/components/ui/form';
import { motion, AnimatePresence } from '@/lib/motionShim';
const cloud = ((typeof import.meta!== 'undefined' ? (import.meta as any)?.env: undefined)?.VITE_CLOUDINARY_CLOUD_NAME as string|undefined) || ((typeof globalThis!=='undefined' ? (globalThis as any).NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: undefined) as string|undefined) || ((typeof process!=='undefined' ? (process as any).env: undefined)?.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME as string|undefined) || ((typeof process!=='undefined' ? (process as any).env: undefined)?.VITE_CLOUDINARY_CLOUD_NAME as string|undefined) || '';
const clUrl = (publicId?:string,w=800,h=450)=> publicId && cloud ? `https://res.cloudinary.com/${cloud}/image/upload/c_fill,w=${w},h=${h},q_auto,f_auto/${publicId}`:'';
export interface Question { questionText:string; answerType:string; correctAnswer?:string; options?:string; }
const pageSchema = z.object({ pageNumber: z.coerce.number().min(1), title: z.string().default(''), content: z.string().min(1,'Content is required'), imageUrl: z.string().default(''), imagePublicId: z.string().default(''), });
export interface PageFormValues extends z.infer<typeof pageSchema>{ id?:number; questions?:Question[]; showNotification?:boolean; }
interface PageFormProps { initialValues?:PageFormValues; pageNumber:number; onSave:(v:PageFormValues)=>void; onRemove:()=>void; showRemoveButton?:boolean; }
const fadeCard={hidden:{opacity:0,y:6},visible:{opacity:1,y:0,transition:{duration:.25}}}; const sectionFade={hidden:{opacity:0,y:4},visible:{opacity:1,y:0,transition:{duration:.2}}}; const itemFade={hidden:{opacity:0,y:6},visible:{opacity:1,y:0,transition:{duration:.22}},exit:{opacity:0,y:-4,transition:{duration:.18}}};
const getToken=()=>{ if(typeof window==='undefined')return null; const t=localStorage.getItem('token'); return t && t!=='null'? t:null; };
async function uploadPageImage(file:File){ const fd=new FormData(); fd.append('file',file); fd.append('kind','page_image'); const token=getToken(); const resp=await fetch(`/api/upload?folder=${encodeURIComponent('ilaw-ng-bayan/pages/images')}`,{method:'POST', headers:token?{Authorization:`Bearer ${token}`} : undefined, body:fd}); const data=await resp.json(); if(!resp.ok||!data?.success) throw new Error(data?.error||'Image upload failed'); return data as {success:true; url:string; publicId:string}; }
export function PageForm({initialValues,pageNumber,onSave,onRemove,showRemoveButton=true}:PageFormProps){ const {toast}=useToast(); const [questions,setQuestions]=useState<Question[]>(initialValues?.questions||[]); const [hasQuestions,setHasQuestions]=useState<boolean>((initialValues?.questions?.length||0)>0); const [imagePreview,setImagePreview]=useState<string|null>(initialValues?.imageUrl||null); const [imageUploading,setImageUploading]=useState(false); const [previewSrc,setPreviewSrc]=useState<string|null>(initialValues?.imageUrl||null); const [previewTriedTransformed,setPreviewTriedTransformed]=useState(false); const fileInputRef=useRef<HTMLInputElement>(null); const [hasUnsaved,setHasUnsaved]=useState(false); const form=useForm<PageFormValues>({resolver:zodResolver(pageSchema), defaultValues:{pageNumber:initialValues?.pageNumber||pageNumber,title:initialValues?.title||'',content:initialValues?.content||'',imageUrl:initialValues?.imageUrl||'',imagePublicId:initialValues?.imagePublicId||''}}); const cloudPublicId=form.watch('imagePublicId'); const watchedImageUrl=form.watch('imageUrl'); const transformed=cloudPublicId?clUrl(cloudPublicId):''; const fallback=imagePreview||(watchedImageUrl && /^https?:\/\//i.test(watchedImageUrl)?watchedImageUrl:''); useEffect(()=>{ if(typeof window==='undefined') return; if(transformed && !previewTriedTransformed){ setPreviewTriedTransformed(true); const img=document.createElement('img'); img.onload=()=>setPreviewSrc(transformed); img.onerror=()=>setPreviewSrc(fallback||null); img.src=transformed; } else if(!transformed){ setPreviewSrc(fallback||null);} },[transformed,fallback]); const buildPayload = useCallback((showNotification:boolean):PageFormValues|null=>{ const v=form.getValues(); if(!v.content?.trim()) return null; return { id:initialValues?.id, pageNumber, title:v.title||'', content:v.content||'', imageUrl:v.imageUrl||'', imagePublicId:v.imagePublicId||'', questions:questions.length?questions:undefined, showNotification }; },[form,initialValues?.id,pageNumber,questions]); const pushSave=(notify:boolean)=>{ const payload=buildPayload(notify); if(payload){ onSave(payload); setHasUnsaved(false);} }; const handleBlur=()=> pushSave(false);
  const handleImageUpload=async(e:React.ChangeEvent<HTMLInputElement>)=>{ const file=e.target.files?.[0]; if(!file) return; if(file.size>5*1024*1024){ toast({title:'Error',description:'Image size should be less than 5MB',variant:'destructive'}); return;} try{ setImageUploading(true); const {url,publicId}=await uploadPageImage(file); form.setValue('imageUrl',url,{shouldDirty:true}); form.setValue('imagePublicId',publicId??'',{shouldDirty:true}); setImagePreview(url); setPreviewSrc(url); setPreviewTriedTransformed(false); setHasUnsaved(true); pushSave(false); toast({title:'Image uploaded',description:'Page image uploaded successfully.'}); }catch(err:any){ toast({title:'Upload failed',description:err?.message||'Could not upload image.',variant:'destructive'});} finally{ setImageUploading(false);} }; const clearImage=()=>{ setImagePreview(null); setPreviewSrc(null); form.setValue('imageUrl',''); form.setValue('imagePublicId',''); setHasUnsaved(true); pushSave(false); if(fileInputRef.current) fileInputRef.current.value=''; };
  const getOptions=(optionsString?:string)=>{ if(!optionsString) return []; return optionsString.includes('\n')? optionsString.split('\n').filter(o=>o.trim()!==''): optionsString.split(',').map(o=>o.trim()).filter(o=>o!==''); };
  const addQuestion=()=>{ setQuestions(p=>[...p,{questionText:'',answerType:'text',correctAnswer:'',options:''}]); setHasQuestions(true); setHasUnsaved(true); }; const removeQuestion=(i:number)=>{ setQuestions(p=>{ const u=[...p]; u.splice(i,1); if(u.length===0) setHasQuestions(false); return u; }); setHasUnsaved(true); pushSave(false); }; const updateQuestion=(i:number,field:keyof Question,value:string)=>{ setQuestions(p=>{ const u=[...p]; u[i]={...u[i],[field]:value}; if(field==='answerType' && value==='multiple_choice'){ const opts=getOptions(u[i].options); if(opts.length===0) u[i].options='Option 1\nOption 2\nOption 3'; } return u; }); setHasUnsaved(true); }; const addOption=(qi:number)=>{ const opts=getOptions(questions[qi].options||''); updateQuestion(qi,'options',[...opts,`Option ${opts.length+1}`].join('\n')); }; const removeOption=(qi:number,oi:number)=>{ const opts=getOptions(questions[qi].options); const q=questions[qi]; if(q.correctAnswer===opts[oi]) updateQuestion(qi,'correctAnswer',''); updateQuestion(qi,'options',opts.slice(0,oi).concat(opts.slice(oi+1)).join('\n')); }; const updateOptionText=(qi:number,oi:number,text:string)=>{ const opts=getOptions(questions[qi].options); const q=questions[qi]; if(q.correctAnswer===opts[oi]) updateQuestion(qi,'correctAnswer',text); opts[oi]=text; updateQuestion(qi,'options',opts.join('\n')); };
  const handleQuestionBlur=()=> pushSave(false);
  return (<motion.div variants={fadeCard} initial={false} animate="visible" className="border-2 border-brand-gold-200 bg-white rounded-2xl shadow mb-5"><div className="border-b border-brand-gold-200 p-4"><div className="flex justify-between items-center"><h3 className="text-xl font-heading font-bold text-ilaw-navy flex items-center"><Sparkles className="h-5 w-5 text-ilaw-gold mr-2" />📄 Page {pageNumber}{hasUnsaved && (<motion.span initial={false} animate={{opacity:1}} className="ml-2 text-[11px] bg-amber-100 text-amber-800 px-2 py-0.5 rounded-full font-medium">• Unsaved</motion.span>)}</h3>{showRemoveButton && (<Button type="button" variant="destructive" size="sm" onClick={onRemove} className="bg-red-500 hover:bg-red-600 text-white font-heading font-bold"><Trash2 className="h-4 w-4 mr-1" />Remove Page</Button>)}</div></div><div className="p-4"><Form {...form}><div className="space-y-5"><FormField control={form.control} name="imagePublicId" render={({field})=> <input type="hidden" {...field}/> } /><div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-stretch"><div className="md:col-span-2 flex flex-col gap-4 md:h-full"><div><FormField control={form.control} name="title" render={({field})=>(<FormItem className="!space-y-1"><FormLabel className="text-ilaw-navy font-heading font-bold">Page Title (Optional)</FormLabel><FormControl><Input {...field} placeholder="Enter a title for this page" value={field.value||''} className="border-2 border-brand-gold-200 focus:border-ilaw-gold" onChange={(e)=>{field.onChange(e.target.value); setHasUnsaved(true);}} onBlur={handleBlur} /></FormControl><FormMessage /></FormItem>)} /></div><div><FormField control={form.control} name="content" render={({field})=>(<FormItem className="!space-y-1 flex-1 flex flex-col"><FormLabel className="text-ilaw-navy font-heading font-bold">Page Content</FormLabel><FormControl className="flex-1 flex"><Textarea {...field} placeholder="Enter the content for this page..." className="border-2 border-brand-gold-200 focus:border-ilaw-gold flex-1 h-full min-h-[260px] md:min-h-0 resize-vertical md:resize-none" onChange={(e)=>{field.onChange(e); setHasUnsaved(true);}} onBlur={handleBlur} /></FormControl><FormMessage /></FormItem>)} /></div></div><div className="md:col-span-1 space-y-3"><FormField control={form.control} name="imageUrl" render={({field})=>(<FormItem><FormLabel className="text-ilaw-navy font-heading font-bold">🖼️ Page Image</FormLabel><div className="space-y-3"><AnimatePresence initial={false}>{previewSrc ? (<motion.div key="img-preview" initial={false} animate={{opacity:1}} className="relative w-full"><div className="relative aspect-[3/4] bg-brand-gold-50 rounded-xl overflow-hidden border-2 border-brand-gold-200"><img src={previewSrc} alt="Page image preview" className="w-full h-full object-cover" onError={()=>{ if(previewSrc===transformed && fallback) setPreviewSrc(fallback); }} /><Button type="button" variant="destructive" size="icon" className="absolute top-2 right-2 h-8 w-8 rounded-full bg-red-500 hover:bg-red-600" onClick={clearImage} disabled={imageUploading}><X className="h-4 w-4" /></Button></div></motion.div>):(<motion.div key="img-drop" initial={false} animate={{opacity:1}} className="flex flex-col items-center justify-center p-5 border-2 border-dashed border-brand-gold-300 rounded-xl bg-brand-gold-50"><Image className="h-7 w-7 text-brand-gold-600 mb-2" /><p className="text-sm text-brand-gold-600 font-medium mb-2">Upload an image for this page</p><div className="flex items-center space-x-2"><input ref={fileInputRef} type="file" accept="image/jpeg,image/jpg,image/png,image/webp,image/gif" className="hidden" onChange={handleImageUpload} id={`image-upload-${pageNumber}`} /><Button type="button" variant="outline" size="sm" className="border-2 border-brand-gold-300 text-ilaw-navy hover:bg-brand-gold-100 font-heading font-bold" onClick={()=>fileInputRef.current?.click()} disabled={imageUploading}>{imageUploading ? (<><Loader2 className="h-4 w-4 mr-1 animate-spin" />Uploading…</>) : (<><Upload className="h-4 w-4 mr-1" />Choose Image</>)}</Button></div></motion.div>)}</AnimatePresence><div className="relative"><FormControl><Input {...field} placeholder="Or enter image URL" value={field.value||''} className="border-2 border-brand-gold-200 focus:border-ilaw-gold" onChange={(e)=>{ const v=e.target.value; field.onChange(v); if(v) form.setValue('imagePublicId',''); setImagePreview(v||null); setHasUnsaved(true); }} onBlur={handleBlur} disabled={imageUploading} /></FormControl><FormDescription className="text-brand-gold-600 font-medium">You can upload OR paste a direct URL. Uploading uses Cloudinary.</FormDescription><FormMessage /></div></div></FormItem>)} /></div></div><div className="pt-5 border-t-2 border-brand-gold-200"><div className="flex items-center justify-between mb-4"><h3 className="text-lg font-heading font-bold text-ilaw-navy flex items-center">❓ Questions</h3><Button type="button" variant="outline" size="sm" onClick={()=>{addQuestion();}} className="border-2 border-brand-gold-300 text-ilaw-navy hover:bg-brand-gold-100 font-heading font-bold transition-transform hover:-translate-y-0.5"><Plus className="h-4 w-4 mr-1" />Add Question</Button></div><AnimatePresence initial={false}>{questions.map((q,i)=>(<motion.div key={i} variants={itemFade} initial={false} animate="visible" exit="exit" className="p-4 border-2 border-brand-gold-200 rounded-xl mb-3 bg-brand-gold-50"><div className="flex justify-between items-start mb-3"><h4 className="text-base font-heading font-bold text-ilaw-navy">❓ Question {i+1}</h4><Button type="button" variant="ghost" size="sm" onClick={()=>removeQuestion(i)} className="h-8 text-red-500 hover:text-red-700 hover:bg-red-50 font-bold"><Trash2 className="h-4 w-4" /></Button></div><div className="space-y-3"><div><Label className="text-ilaw-navy font-heading font-bold">Question Text</Label><Textarea value={q.questionText} onChange={(e)=>{updateQuestion(i,'questionText',e.target.value);}} onBlur={handleQuestionBlur} placeholder="Enter your question here..." className="mt-1 border-2 border-brand-gold-200 focus:border-ilaw-gold" rows={3} /></div><div><Label className="text-ilaw-navy font-heading font-bold">Answer Type</Label><select value={q.answerType} onChange={(e)=>{updateQuestion(i,'answerType',e.target.value); handleQuestionBlur();}} className="w-full mt-1 p-2 border-2 border-brand-gold-200 rounded-lg focus:border-ilaw-gold font-medium"><option value="text">✍️ Text</option><option value="multiple_choice">🔘 Multiple Choice</option></select></div><AnimatePresence initial={false}>{q.answerType==='text' && (<motion.div key={`text-${i}`} initial={false} animate={{opacity:1}}><Label className="text-ilaw-navy font-heading font-bold">Correct Answer</Label><Input value={q.correctAnswer||''} onChange={(e)=>{updateQuestion(i,'correctAnswer',e.target.value);}} onBlur={handleQuestionBlur} placeholder="Enter the correct answer" className="mt-1 border-2 border-brand-gold-200 focus:border-ilaw-gold" /></motion.div>)}{q.answerType==='multiple_choice' && (<motion.div key={`mc-${i}`} initial={false} animate={{opacity:1}}><Label className="text-ilaw-navy font-heading font-bold">Options</Label><div className="border-2 border-brand-gold-200 rounded-xl mt-1 bg-white">{getOptions(q.options).map((opt,oi)=>(<div key={oi} className="flex items-center p-3 border-b border-brand-gold-200 last:border-b-0"><input type="radio" id={`q-${i}-opt-${oi}`} name={`question-${i}-correct`} className="mr-3 h-4 w-4 text-ilaw-gold" checked={q.correctAnswer===opt} onChange={()=>{updateQuestion(i,'correctAnswer',opt); handleQuestionBlur();}} /><input type="text" value={opt} onChange={(e)=>updateOptionText(i,oi,e.target.value)} onBlur={handleQuestionBlur} className="flex-1 border-0 focus:ring-0 p-1 font-medium text-ilaw-navy" placeholder={`Option ${oi+1}`} /><Button type="button" variant="ghost" size="sm" className="h-8 text-red-500 hover:text-red-700 hover:bg-red-50" onClick={()=>{removeOption(i,oi); handleQuestionBlur();}}><Trash2 className="h-4 w-4" /></Button></div>))}<div className="p-3"><Button type="button" variant="ghost" size="sm" onClick={()=>{addOption(i);}} className="w-full justify-center border-2 border-dashed border-brand-gold-300 text-brand-gold-600 hover:bg-brand-gold-100 font-bold"><Plus className="h-4 w-4 mr-1" />Add Option</Button></div></div><p className="text-xs text-brand-gold-600 mt-1 font-medium">Select the radio button next to the correct answer</p></motion.div>)}</AnimatePresence></div></motion.div>))}</AnimatePresence>{questions.length===0 && (<p className="text-sm text-brand-gold-600 italic font-medium text-center p-4 bg-brand-gold-50 rounded-xl border-2 border-brand-gold-200">No questions added yet. Click 'Add Question' to add interactive questions to this page.</p>)} </div><div className="pt-5 border-t-2 border-brand-gold-200"><div className="bg-gradient-to-r from-brand-gold-50 to-brand-navy-50/40 border-2 border-brand-gold-200 rounded-xl p-3 text-center"><p className="text-sm text-ilaw-navy font-medium flex items-center justify-center"><Sparkles className="h-4 w-4 mr-2 text-ilaw-gold" />✨ Changes are staged locally. Use "Save Changes" at the bottom to persist the entire book.</p></div></div></div></Form></div></motion.div> ); }